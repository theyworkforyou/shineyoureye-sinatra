// Handy when you have a parent element with vertical padding,
// and you don't want children to add their own margins inside.
@mixin remove-vertical-margin-first-and-last-child() {
    & > :first-child {
        margin-top: 0;
    }

    & > :last-child {
        margin-bottom: 0;
    }
}

@mixin high-dpi-background-image($path) {
    background-image: url("#{$path}.png");
    background-image: url("#{$path}.svg"), none;
}

@mixin display-flex() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

@mixin flex($values, $values2009: 0) {
    -webkit-box-flex: $values2009;
    -moz-box-flex: $values2009;
    -webkit-box-flex: $values;
    -moz-box-flex: $values;
    -webkit-flex: $values;
    -ms-flex: $values;
    flex: $values;
}

@mixin flex-wrap($wrap) {
    -webkit-box-wrap: $wrap;
    -webkit-flex-wrap: $wrap;
    -ms-flex-wrap: $wrap;
    flex-wrap: $wrap;
}

@mixin align-items($alignment) {
    -webkit-box-align: $alignment;
    -webkit-align-items: $alignment;
    -ms-flex-align: $alignment;
    align-items: $alignment;
}

@mixin flex-direction($direction) {
    @if ($direction == column) {
        -webkit-box-orient: vertical;
    } @elseif ($direction == row) {
        -webkit-box-orient: horizontal;
    }
    -moz-flex-direction: $direction;
    -ms-flex-direction: $direction;
    -webkit-flex-direction: $direction;
    flex-direction: $direction;
}

@mixin justify-content($alignment) {
    -webkit-justify-content: $alignment;
    -moz-justify-content: $alignment;
    -ms-justify-content: $alignment;
    justify-content: $alignment;
}

@mixin order($order) {
    // 2009 syntax
    -webkit-box-ordinal-group: $order;
    -moz-box-ordinal-group: $order;

    // 2011 syntax https://www.w3.org/TR/2012/WD-css3-flexbox-20120322/#flex-order
    -ms-flex-order: $order;
    flex-order: $order;

    // Modern syntax
    -webkit-order: $order;
    -ms-order: $order;
    order: $order;
}

@function px-to-em($pixel-amount, $context: 16) {
    @return #{(1em/$context) * $pixel-amount};
}
